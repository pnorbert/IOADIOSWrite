/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1;

deltaT          0.005;

writeControl    timeStep;

writeInterval   5;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable false;

functions
{

     fieldAverage1
     {
         type            fieldAverage;
         functionObjectLibs ( "libfieldFunctionObjects.so" );
         enabled         true;
         outputControl   outputTime;
         fields
         (
             p
             {
                 mean        on;
                 prime2Mean  on;
                 base        time;
             }

         );
    }

    Lambda2
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Lambda2;

        outputControl       outputTime;
    }

    Q
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Q;

        outputControl       outputTime;
    }

    vorticity
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                vorticity;

        outputControl       outputTime;
    }


    adiosData
    {
        // Write the solution (Eulerian and Lagrangian fields)
        // into an ADIOS container
        type                adiosWrite;

        // Where to load it from
        functionObjectLibs  ( "libIOadiosWrite.so" );

        // We can write mesh, fields and particles from multiple regions
        regions
        {

            // Name of primary region is 'region0'
            region0
            {
                // Volume fields to write
                objectNames         ( U p Lambda2 Q vorticity phi pMean pPrime2Mean);

                // Kinematic clouds to write (leave blank to skip)
                cloudNames          (  );

                // Attributes to write for particles. Valid choices are:
                //  - origProc        = Original process (from where it was injected)
                //  - origId          = ID on orignal process
                //  - cell            = Current cell (on local process)
                //  - currProc        = Current process
                //  - rho             = Particle density
                //  - d               = Particle diameter
                //  - age             = Particle age
                //  - position        = Position in space
                //  - U               = Particle velocity
                //  - Us              = Slip velocity Us = U - Uc
                cloudAttribs        (  );

            }
        }

        // Output I/O method (e.g. MPI (default), POSIX, MPI_AGGREGATE)
        // run 'adios_config -m' to see available methods
        //adiosMethod        MPI_AGGREGATE;
        adiosMethod        MPI;

        // Parameters for the selected method, default = ""
        //methodparams       "verbose=4;num_aggregators=2;num_ost=2";
        methodparams       "";

        // Write interval (in number of iterations)
        writeInterval       5;

        // Restart with output time not step (do not use if no restart needed)
        // e.g. 1.725 will look for adiosData/1.725.bp for checkpoint data
        restartTime         0.5;
    }
}

// ************************************************************************* //
