/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1;

deltaT          0.005;

writeControl    timeStep;

writeInterval   5;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable false;

functions
{

     fieldAverage1
     {
         type            fieldAverage;
         functionObjectLibs ( "libfieldFunctionObjects.so" );
         enabled         true;
         outputControl   outputTime;
         fields
         (
             p
             {
                 mean        on;
                 prime2Mean  on;
                 base        time;
             }
         );
    }

    Lambda2
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Lambda2;

        outputControl       outputTime;
    }

    Q
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Q;

        outputControl       outputTime;
    }

    vorticity
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                vorticity;

        outputControl       outputTime;
    }

    adiosData
    {
        // Write solution (Eulerian, Lagrangian) into ADIOS container
        type                adiosWrite;
        #include            "adiosDict";
        functionObjectLibs  ( "libIOadiosWrite.so" );

        // Additional fields (eg, from other function objects)
        write
        {
            fields          ( Lambda2 Q vorticity pMean pPrime2Mean );
        }

        // Write interval (in number of iterations)
        writeInterval       5;

        // Restart with output time not step (do not use if no restart needed)
        // e.g. 1.725 will look for adiosData/1.725.bp for checkpoint data
        // restartTime         0.5;
    }
}

// ************************************************************************* //
